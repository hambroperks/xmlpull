//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xmlpull/xmlpull/src/main/java/org/xmlpull/v1/XmlPullParserException.java
//

#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@implementation OrgXmlpullV1XmlPullParserException

- (instancetype __nonnull)initWithNSString:(NSString *)s {
  OrgXmlpullV1XmlPullParserException_initWithNSString_(self, s);
  return self;
}

- (instancetype __nonnull)initWithNSString:(NSString *)msg
             withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                     withJavaLangThrowable:(JavaLangThrowable *)chain {
  OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_(self, msg, parser, chain);
  return self;
}

- (JavaLangThrowable *)getDetail {
  return detail_;
}

- (jint)getLineNumber {
  return row_;
}

- (jint)getColumnNumber {
  return column_;
}

- (void)printStackTrace {
  if (detail_ == nil) {
    [super printStackTrace];
  }
  else {
    @synchronized(JreLoadStatic(JavaLangSystem, err)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", [super getMessage], @"; nested exception is:")];
      [((JavaLangThrowable *) nil_chk(detail_)) printStackTrace];
    }
  }
}

- (void)dealloc {
  RELEASE_(detail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withOrgXmlpullV1XmlPullParser:withJavaLangThrowable:);
  methods[2].selector = @selector(getDetail);
  methods[3].selector = @selector(getLineNumber);
  methods[4].selector = @selector(getColumnNumber);
  methods[5].selector = @selector(printStackTrace);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "detail_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "row_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "column_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LOrgXmlpullV1XmlPullParser;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _OrgXmlpullV1XmlPullParserException = { "XmlPullParserException", "org.xmlpull.v1", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgXmlpullV1XmlPullParserException;
}

@end

void OrgXmlpullV1XmlPullParserException_initWithNSString_(OrgXmlpullV1XmlPullParserException *self, NSString *s) {
  JavaLangException_initWithNSString_(self, s);
  self->row_ = -1;
  self->column_ = -1;
}

OrgXmlpullV1XmlPullParserException *new_OrgXmlpullV1XmlPullParserException_initWithNSString_(NSString *s) {
  J2OBJC_NEW_IMPL(OrgXmlpullV1XmlPullParserException, initWithNSString_, s)
}

OrgXmlpullV1XmlPullParserException *create_OrgXmlpullV1XmlPullParserException_initWithNSString_(NSString *s) {
  J2OBJC_CREATE_IMPL(OrgXmlpullV1XmlPullParserException, initWithNSString_, s)
}

void OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_(OrgXmlpullV1XmlPullParserException *self, NSString *msg, id<OrgXmlpullV1XmlPullParser> parser, JavaLangThrowable *chain) {
  JavaLangException_initWithNSString_(self, JreStrcat("$$$", (msg == nil ? @"" : JreStrcat("$C", msg, ' ')), (parser == nil ? @"" : JreStrcat("$$$", @"(position:", [parser getPositionDescription], @") ")), (chain == nil ? @"" : JreStrcat("$@", @"caused by: ", chain))));
  self->row_ = -1;
  self->column_ = -1;
  if (parser != nil) {
    self->row_ = [parser getLineNumber];
    self->column_ = [parser getColumnNumber];
  }
  JreStrongAssign(&self->detail_, chain);
}

OrgXmlpullV1XmlPullParserException *new_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_(NSString *msg, id<OrgXmlpullV1XmlPullParser> parser, JavaLangThrowable *chain) {
  J2OBJC_NEW_IMPL(OrgXmlpullV1XmlPullParserException, initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_, msg, parser, chain)
}

OrgXmlpullV1XmlPullParserException *create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_(NSString *msg, id<OrgXmlpullV1XmlPullParser> parser, JavaLangThrowable *chain) {
  J2OBJC_CREATE_IMPL(OrgXmlpullV1XmlPullParserException, initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_, msg, parser, chain)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXmlpullV1XmlPullParserException)

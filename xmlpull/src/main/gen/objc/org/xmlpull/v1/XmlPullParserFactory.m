//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xmlpull/xmlpull/src/main/java/org/xmlpull/v1/XmlPullParserFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"
#include "org/xmlpull/v1/XmlPullParserFactory.h"
#include "org/xmlpull/v1/XmlSerializer.h"

inline NSString *OrgXmlpullV1XmlPullParserFactory_get_RESOURCE_NAME(void);
static NSString *OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME = @"/META-INF/services/org.xmlpull.v1.XmlPullParserFactory";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgXmlpullV1XmlPullParserFactory, RESOURCE_NAME, NSString *)

J2OBJC_INITIALIZED_DEFN(OrgXmlpullV1XmlPullParserFactory)

IOSClass *OrgXmlpullV1XmlPullParserFactory_referenceContextClass;
NSString *OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME = @"org.xmlpull.v1.XmlPullParserFactory";

@implementation OrgXmlpullV1XmlPullParserFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  OrgXmlpullV1XmlPullParserFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)state {
  [((JavaUtilHashtable *) nil_chk(features_)) putWithId:name withId:create_JavaLangBoolean_initWithBoolean_(state)];
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  JavaLangBoolean *value = (JavaLangBoolean *) cast_chk([((JavaUtilHashtable *) nil_chk(features_)) getWithId:name], [JavaLangBoolean class]);
  return value != nil ? [value booleanValue] : false;
}

- (void)setNamespaceAwareWithBoolean:(jboolean)awareness {
  [((JavaUtilHashtable *) nil_chk(features_)) putWithId:OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES withId:create_JavaLangBoolean_initWithBoolean_(awareness)];
}

- (jboolean)isNamespaceAware {
  return [self getFeatureWithNSString:OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES];
}

- (void)setValidatingWithBoolean:(jboolean)validating {
  [((JavaUtilHashtable *) nil_chk(features_)) putWithId:OrgXmlpullV1XmlPullParser_FEATURE_VALIDATION withId:create_JavaLangBoolean_initWithBoolean_(validating)];
}

- (jboolean)isValidating {
  return [self getFeatureWithNSString:OrgXmlpullV1XmlPullParser_FEATURE_VALIDATION];
}

- (id<OrgXmlpullV1XmlPullParser>)newPullParser {
  if (parserClasses_ == nil) @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Factory initialization was incomplete - has not tried ", classNamesLocation_));
  if ([parserClasses_ size] == 0) @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"No valid parser classes found in ", classNamesLocation_));
  JavaLangStringBuffer *issues = create_JavaLangStringBuffer_init();
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(parserClasses_)) size]; i++) {
    IOSClass *ppClass = (IOSClass *) cast_chk([((JavaUtilVector *) nil_chk(parserClasses_)) elementAtWithInt:i], [IOSClass class]);
    @try {
      id<OrgXmlpullV1XmlPullParser> pp = (id<OrgXmlpullV1XmlPullParser>) cast_check([((IOSClass *) nil_chk(ppClass)) newInstance], OrgXmlpullV1XmlPullParser_class_());
      for (id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(features_)) keys]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
        NSString *key = (NSString *) cast_chk([e nextElement], [NSString class]);
        JavaLangBoolean *value = (JavaLangBoolean *) cast_chk([((JavaUtilHashtable *) nil_chk(features_)) getWithId:key], [JavaLangBoolean class]);
        if (value != nil && [value booleanValue]) {
          [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pp)) setFeatureWithNSString:key withBoolean:true];
        }
      }
      return pp;
    }
    @catch (JavaLangException *ex) {
      [issues appendWithNSString:JreStrcat("$$$$", [ppClass getName], @": ", [ex description], @"; ")];
    }
  }
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$@", @"could not create parser: ", issues));
}

- (id<OrgXmlpullV1XmlSerializer>)newSerializer {
  if (serializerClasses_ == nil) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"Factory initialization incomplete - has not tried ", classNamesLocation_));
  }
  if ([serializerClasses_ size] == 0) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"No valid serializer classes found in ", classNamesLocation_));
  }
  JavaLangStringBuffer *issues = create_JavaLangStringBuffer_init();
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(serializerClasses_)) size]; i++) {
    IOSClass *ppClass = (IOSClass *) cast_chk([((JavaUtilVector *) nil_chk(serializerClasses_)) elementAtWithInt:i], [IOSClass class]);
    @try {
      id<OrgXmlpullV1XmlSerializer> ser = (id<OrgXmlpullV1XmlSerializer>) cast_check([((IOSClass *) nil_chk(ppClass)) newInstance], OrgXmlpullV1XmlSerializer_class_());
      return ser;
    }
    @catch (JavaLangException *ex) {
      [issues appendWithNSString:JreStrcat("$$$$", [ppClass getName], @": ", [ex description], @"; ")];
    }
  }
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$@", @"could not create serializer: ", issues));
}

+ (OrgXmlpullV1XmlPullParserFactory *)newInstance {
  return OrgXmlpullV1XmlPullParserFactory_newInstance();
}

+ (OrgXmlpullV1XmlPullParserFactory *)newInstanceWithNSString:(NSString *)classNames
                                                 withIOSClass:(IOSClass *)context {
  return OrgXmlpullV1XmlPullParserFactory_newInstanceWithNSString_withIOSClass_(classNames, context);
}

- (void)dealloc {
  RELEASE_(parserClasses_);
  RELEASE_(classNamesLocation_);
  RELEASE_(serializerClasses_);
  RELEASE_(features_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParser;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParserFactory;", 0x9, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParserFactory;", 0x9, 8, 9, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[2].selector = @selector(getFeatureWithNSString:);
  methods[3].selector = @selector(setNamespaceAwareWithBoolean:);
  methods[4].selector = @selector(isNamespaceAware);
  methods[5].selector = @selector(setValidatingWithBoolean:);
  methods[6].selector = @selector(isValidating);
  methods[7].selector = @selector(newPullParser);
  methods[8].selector = @selector(newSerializer);
  methods[9].selector = @selector(newInstance);
  methods[10].selector = @selector(newInstanceWithNSString:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "referenceContextClass", "LIOSClass;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "PROPERTY_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "RESOURCE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "parserClasses_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "classNamesLocation_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serializerClasses_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "features_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFeature", "LNSString;Z", "LOrgXmlpullV1XmlPullParserException;", "getFeature", "LNSString;", "setNamespaceAware", "Z", "setValidating", "newInstance", "LNSString;LIOSClass;", &OrgXmlpullV1XmlPullParserFactory_referenceContextClass, &OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME, &OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME };
  static const J2ObjcClassInfo _OrgXmlpullV1XmlPullParserFactory = { "XmlPullParserFactory", "org.xmlpull.v1", ptrTable, methods, fields, 7, 0x1, 11, 7, -1, -1, -1, -1, -1 };
  return &_OrgXmlpullV1XmlPullParserFactory;
}

+ (void)initialize {
  if (self == [OrgXmlpullV1XmlPullParserFactory class]) {
    {
      OrgXmlpullV1XmlPullParserFactory *f = create_OrgXmlpullV1XmlPullParserFactory_init();
      JreStrongAssign(&OrgXmlpullV1XmlPullParserFactory_referenceContextClass, [f java_getClass]);
    }
    J2OBJC_SET_INITIALIZED(OrgXmlpullV1XmlPullParserFactory)
  }
}

@end

void OrgXmlpullV1XmlPullParserFactory_init(OrgXmlpullV1XmlPullParserFactory *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->features_, new_JavaUtilHashtable_init());
}

OrgXmlpullV1XmlPullParserFactory *new_OrgXmlpullV1XmlPullParserFactory_init() {
  J2OBJC_NEW_IMPL(OrgXmlpullV1XmlPullParserFactory, init)
}

OrgXmlpullV1XmlPullParserFactory *create_OrgXmlpullV1XmlPullParserFactory_init() {
  J2OBJC_CREATE_IMPL(OrgXmlpullV1XmlPullParserFactory, init)
}

OrgXmlpullV1XmlPullParserFactory *OrgXmlpullV1XmlPullParserFactory_newInstance() {
  OrgXmlpullV1XmlPullParserFactory_initialize();
  return OrgXmlpullV1XmlPullParserFactory_newInstanceWithNSString_withIOSClass_(nil, nil);
}

OrgXmlpullV1XmlPullParserFactory *OrgXmlpullV1XmlPullParserFactory_newInstanceWithNSString_withIOSClass_(NSString *classNames, IOSClass *context) {
  OrgXmlpullV1XmlPullParserFactory_initialize();
  if (context == nil) {
    context = OrgXmlpullV1XmlPullParserFactory_referenceContextClass;
  }
  NSString *classNamesLocation = nil;
  if (classNames == nil || [classNames java_length] == 0 || [@"DEFAULT" isEqual:classNames]) {
    @try {
      JavaIoInputStream *is = [((IOSClass *) nil_chk(context)) getResourceAsStream:OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME];
      if (is == nil) @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$", @"resource not found: ", OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME, @" make sure that parser implementing XmlPull API is available"));
      JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
      while (true) {
        jint ch = [is read];
        if (ch < 0) break;
        else if (ch > ' ') [sb appendWithChar:(jchar) ch];
      }
      [is close];
      classNames = [sb description];
    }
    @catch (JavaLangException *e) {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaLangThrowable_(nil, nil, e);
    }
    classNamesLocation = JreStrcat("$$$$C", @"resource ", OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME, @" that contained '", classNames, '\'');
  }
  else {
    classNamesLocation = JreStrcat("$$C", @"parameter classNames to newInstance() that contained '", classNames, '\'');
  }
  OrgXmlpullV1XmlPullParserFactory *factory = nil;
  JavaUtilVector *parserClasses = create_JavaUtilVector_init();
  JavaUtilVector *serializerClasses = create_JavaUtilVector_init();
  jint pos = 0;
  while (pos < [((NSString *) nil_chk(classNames)) java_length]) {
    jint cut = [classNames java_indexOf:',' fromIndex:pos];
    if (cut == -1) cut = [classNames java_length];
    NSString *name = [classNames java_substring:pos endIndex:cut];
    IOSClass *candidate = nil;
    id instance = nil;
    @try {
      candidate = IOSClass_forName_(name);
      instance = [((IOSClass *) nil_chk(candidate)) newInstance];
    }
    @catch (JavaLangException *e) {
    }
    if (candidate != nil) {
      jboolean recognized = false;
      if ([OrgXmlpullV1XmlPullParser_class_() isInstance:instance]) {
        [parserClasses addElementWithId:candidate];
        recognized = true;
      }
      if ([OrgXmlpullV1XmlSerializer_class_() isInstance:instance]) {
        [serializerClasses addElementWithId:candidate];
        recognized = true;
      }
      if ([instance isKindOfClass:[OrgXmlpullV1XmlPullParserFactory class]]) {
        if (factory == nil) {
          factory = (OrgXmlpullV1XmlPullParserFactory *) cast_chk(instance, [OrgXmlpullV1XmlPullParserFactory class]);
        }
        recognized = true;
      }
      if (!recognized) {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"incompatible class: ", name));
      }
    }
    pos = cut + 1;
  }
  if (factory == nil) {
    factory = create_OrgXmlpullV1XmlPullParserFactory_init();
  }
  JreStrongAssign(&factory->parserClasses_, parserClasses);
  JreStrongAssign(&factory->serializerClasses_, serializerClasses);
  JreStrongAssign(&factory->classNamesLocation_, classNamesLocation);
  return factory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXmlpullV1XmlPullParserFactory)

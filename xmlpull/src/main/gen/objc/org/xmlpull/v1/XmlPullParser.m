//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/xmlpull/xmlpull/src/main/java/org/xmlpull/v1/XmlPullParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/xmlpull/v1/XmlPullParser.h"

J2OBJC_INITIALIZED_DEFN(OrgXmlpullV1XmlPullParser)

NSString *OrgXmlpullV1XmlPullParser_NO_NAMESPACE = @"";
IOSObjectArray *OrgXmlpullV1XmlPullParser_TYPES;
NSString *OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES = @"http://xmlpull.org/v1/doc/features.html#process-namespaces";
NSString *OrgXmlpullV1XmlPullParser_FEATURE_REPORT_NAMESPACE_ATTRIBUTES = @"http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes";
NSString *OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_DOCDECL = @"http://xmlpull.org/v1/doc/features.html#process-docdecl";
NSString *OrgXmlpullV1XmlPullParser_FEATURE_VALIDATION = @"http://xmlpull.org/v1/doc/features.html#validation";

@implementation OrgXmlpullV1XmlPullParser

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 10, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, 2, -1, -1, -1 },
    { NULL, "I", 0x401, 13, 14, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 15, 14, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 16, 14, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 17, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x401, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 20, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 21, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 22, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 23, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 24, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 25, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 25, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 26, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 26, -1, -1, -1 },
    { NULL, "V", 0x401, 27, 28, 26, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 26, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 26, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[1].selector = @selector(getFeatureWithNSString:);
  methods[2].selector = @selector(setPropertyWithNSString:withId:);
  methods[3].selector = @selector(getPropertyWithNSString:);
  methods[4].selector = @selector(setInputWithJavaIoReader:);
  methods[5].selector = @selector(setInputWithJavaIoInputStream:withNSString:);
  methods[6].selector = @selector(getInputEncoding);
  methods[7].selector = @selector(defineEntityReplacementTextWithNSString:withNSString:);
  methods[8].selector = @selector(getNamespaceCountWithInt:);
  methods[9].selector = @selector(getNamespacePrefixWithInt:);
  methods[10].selector = @selector(getNamespaceUriWithInt:);
  methods[11].selector = @selector(getNamespaceWithNSString:);
  methods[12].selector = @selector(getDepth);
  methods[13].selector = @selector(getPositionDescription);
  methods[14].selector = @selector(getLineNumber);
  methods[15].selector = @selector(getColumnNumber);
  methods[16].selector = @selector(isWhitespace);
  methods[17].selector = @selector(getText);
  methods[18].selector = @selector(getTextCharactersWithIntArray:);
  methods[19].selector = @selector(getNamespace);
  methods[20].selector = @selector(getName);
  methods[21].selector = @selector(getPrefix);
  methods[22].selector = @selector(isEmptyElementTag);
  methods[23].selector = @selector(getAttributeCount);
  methods[24].selector = @selector(getAttributeNamespaceWithInt:);
  methods[25].selector = @selector(getAttributeNameWithInt:);
  methods[26].selector = @selector(getAttributePrefixWithInt:);
  methods[27].selector = @selector(getAttributeTypeWithInt:);
  methods[28].selector = @selector(isAttributeDefaultWithInt:);
  methods[29].selector = @selector(getAttributeValueWithInt:);
  methods[30].selector = @selector(getAttributeValueWithNSString:withNSString:);
  methods[31].selector = @selector(getEventType);
  methods[32].selector = @selector(next);
  methods[33].selector = @selector(nextToken);
  methods[34].selector = @selector(requireWithInt:withNSString:withNSString:);
  methods[35].selector = @selector(nextText);
  methods[36].selector = @selector(nextTag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_NAMESPACE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "START_DOCUMENT", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_START_DOCUMENT, 0x19, -1, -1, -1, -1 },
    { "END_DOCUMENT", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_END_DOCUMENT, 0x19, -1, -1, -1, -1 },
    { "START_TAG", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_START_TAG, 0x19, -1, -1, -1, -1 },
    { "END_TAG", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_END_TAG, 0x19, -1, -1, -1, -1 },
    { "TEXT", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_TEXT, 0x19, -1, -1, -1, -1 },
    { "CDSECT", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_CDSECT, 0x19, -1, -1, -1, -1 },
    { "ENTITY_REF", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_ENTITY_REF, 0x19, -1, -1, -1, -1 },
    { "IGNORABLE_WHITESPACE", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE, 0x19, -1, -1, -1, -1 },
    { "PROCESSING_INSTRUCTION", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION, 0x19, -1, -1, -1, -1 },
    { "COMMENT", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_COMMENT, 0x19, -1, -1, -1, -1 },
    { "DOCDECL", "I", .constantValue.asInt = OrgXmlpullV1XmlPullParser_DOCDECL, 0x19, -1, -1, -1, -1 },
    { "TYPES", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "FEATURE_PROCESS_NAMESPACES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "FEATURE_REPORT_NAMESPACE_ATTRIBUTES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "FEATURE_PROCESS_DOCDECL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "FEATURE_VALIDATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
  };
  static const void *ptrTable[] = { "setFeature", "LNSString;Z", "LOrgXmlpullV1XmlPullParserException;", "getFeature", "LNSString;", "setProperty", "LNSString;LNSObject;", "getProperty", "setInput", "LJavaIoReader;", "LJavaIoInputStream;LNSString;", "defineEntityReplacementText", "LNSString;LNSString;", "getNamespaceCount", "I", "getNamespacePrefix", "getNamespaceUri", "getNamespace", "getTextCharacters", "[I", "getAttributeNamespace", "getAttributeName", "getAttributePrefix", "getAttributeType", "isAttributeDefault", "getAttributeValue", "LOrgXmlpullV1XmlPullParserException;LJavaIoIOException;", "require", "ILNSString;LNSString;", &OrgXmlpullV1XmlPullParser_NO_NAMESPACE, &OrgXmlpullV1XmlPullParser_TYPES, &OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES, &OrgXmlpullV1XmlPullParser_FEATURE_REPORT_NAMESPACE_ATTRIBUTES, &OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_DOCDECL, &OrgXmlpullV1XmlPullParser_FEATURE_VALIDATION };
  static const J2ObjcClassInfo _OrgXmlpullV1XmlPullParser = { "XmlPullParser", "org.xmlpull.v1", ptrTable, methods, fields, 7, 0x609, 37, 17, -1, -1, -1, -1, -1 };
  return &_OrgXmlpullV1XmlPullParser;
}

+ (void)initialize {
  if (self == [OrgXmlpullV1XmlPullParser class]) {
    JreStrongAssignAndConsume(&OrgXmlpullV1XmlPullParser_TYPES, [IOSObjectArray newArrayWithObjects:(id[]){ @"START_DOCUMENT", @"END_DOCUMENT", @"START_TAG", @"END_TAG", @"TEXT", @"CDSECT", @"ENTITY_REF", @"IGNORABLE_WHITESPACE", @"PROCESSING_INSTRUCTION", @"COMMENT", @"DOCDECL" } count:11 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgXmlpullV1XmlPullParser)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgXmlpullV1XmlPullParser)
